n<-length(y)
fit<-lm(y~x)
l<-summary(fit)
summary(fit)$signma
summary(fit)$sigma
?pt
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
n<-length(x)
beta_1<-cor(y,x)*sd(y)/sd(x)
pt(0.975,df=n-2)
pt(0.975,df=n-2,lower.tail=TRUE)
1- 2*pt(0.975,df=n-2,lower.tail=TRUE)
2*pt(0.975,df=n-2,lower.tail=TRUE)
fit<-lm(y~x)
summary(fit)$sigma
data(mtcars)
linfit<-lm(mpg~wt,data=mpg)
linfit<-lm(mpg~wt,data=mtcars)
data(mtcars)
linfit<-lm(mpg~wt,data=mtcars)
summary(linfit)$coefficients
predictor<-mtcars$wt-mean(mtcars$wt)
prediction<-mtcars$mpg-mean(mtcars$mpg)
data(mtcars)
predictor<-mtcars$wt-mean(mtcars$wt)
prediction<-mtcars$mpg-mean(mtcars$mpg)
linfit<-lm(prediction~predictor)
summary(linfit)$coefficients
5.71-0.538
linfit<-lm(y~x)
summary(linfit)$coefficients
linfit<-lm(mpg~wt,data=mtcars)
summary(linfit)$coefficients
beta_0<-summary(linfit)$coefficients[1,1]
sebeta_0<-summary(linfit)$coefficients[1,2]
summary(linfit)$coefficients[1,1]
summary(linfit)$coefficients[1,2]
37.285126 -
0
n<-nrow(mtcars)
beta_0-pt(0.975,df=n-2)*sebeta_0
pt(0.975,df=n-2)
beta_0-pt(0.975,df=n-2,lower.tail=FALSE)*sebeta_0
pt(0.975,df=n-2,lower.tail=FALSE)
data(mtcars)
n<-nrow(mtcars)
predictor<-mtcars$wt-mean(mtcars$wt)
prediction<-mtcars$mpg-mean(mtcars$mpg)
linfit<-lm(prediction~predictor)
#linfit<-lm(mpg~wt,data=mtcars)
beta_0<-summary(linfit)$coefficients[1,1]
sebeta_0<-summary(linfit)$coefficients[1,2]
beta_0-pt(0.975,df=n-2,lower.tail=FALSE)*sebeta_0
data(mtcars)
n<-nrow(mtcars)
predictor<-mtcars$wt-mean(mtcars$wt)
prediction<-mtcars$mpg-mean(mtcars$mpg)
linfit<-lm(prediction~predictor)
#linfit<-lm(mpg~wt,data=mtcars)
beta_0<-summary(linfit)$coefficients[1,1]
sebeta_0<-summary(linfit)$coefficients[1,2]
beta_0-qt(0.975,df=linfit$df)*sebeta_0
data(mtcars)
n<-nrow(mtcars)
predictor<-mtcars$wt-mean(mtcars$wt)
prediction<-mtcars$mpg-mean(mtcars$mpg)
#linfit<-lm(prediction~predictor)
linfit<-lm(mpg~wt,data=mtcars)
beta_0<-summary(linfit)$coefficients[1,1]
sebeta_0<-summary(linfit)$coefficients[1,2]
beta_0-qt(0.975,df=linfit$df)*sebeta_0
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
n<-length(x)
beta_1<-cor(y,x)*sd(y)/sd(x)
2*pt(0.975,df=n-2,lower.tail=TRUE)
fit<-lm(y~x)
summary(fit)$coefficients
summary(fit)$sigma
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
n<-length(x)
fit<-lm(y~x)
coeftable<-summary(fit)$coefficients
beta_0<-coeftable[1,1]
sebeta_0<-coeftable[1,2]
tbeta_0<-beta_0/sebeta_0
summary(fit)$sigma
coeftable
sepredatmean<-summary(linfit)$sigma*sqrt(1+(1/n))
data(mtcars)
n<-nrow(mtcars)
#predictor<-mtcars$wt-mean(mtcars$wt)
#prediction<-mtcars$mpg-mean(mtcars$mpg)
#linfit<-lm(prediction~predictor)
linfit<-lm(mpg~wt,data=mtcars)
beta_0<-summary(linfit)$coefficients[1,1]
sebeta_0<-summary(linfit)$coefficients[1,2]
beta_1<-summary(linfit)$coefficients[2,1]
yhati<-beta_0+beta_1*mean(mtcars$wt) # prediction @ mean
# standard error of prediction @ mean
sepredatmean<-summary(linfit)$sigma*sqrt(1+(1/n))
yhati-sepredatmean
data(mtcars)
n<-nrow(mtcars)
#predictor<-mtcars$wt-mean(mtcars$wt)
#prediction<-mtcars$mpg-mean(mtcars$mpg)
#linfit<-lm(prediction~predictor)
linfit<-lm(mpg~wt,data=mtcars)
beta_0<-summary(linfit)$coefficients[1,1]
sebeta_0<-summary(linfit)$coefficients[1,2]
beta_1<-summary(linfit)$coefficients[2,1]
yhati<-beta_0+beta_1*mean(mtcars$wt) # prediction @ mean
# standard error of prediction @ mean
sepredatmean<-summary(linfit)$sigma*sqrt(1+(1/n))
yhati-sepredatmean*qt(0.975,n-2)
data(mtcars)
n<-nrow(mtcars)
#predictor<-mtcars$wt-mean(mtcars$wt)
#prediction<-mtcars$mpg-mean(mtcars$mpg)
#linfit<-lm(prediction~predictor)
linfit<-lm(mpg~wt,data=mtcars)
beta_0<-summary(linfit)$coefficients[1,1]
sebeta_0<-summary(linfit)$coefficients[1,2]
beta_1<-summary(linfit)$coefficients[2,1]
yhati<-beta_0+beta_1*mean(mtcars$wt) # prediction @ mean
# standard error of prediction @ mean
sepredatmean<-summary(linfit)$sigma*sqrt(1+(1/n))
yhati-sepredatmean*qt(0.975,n-2,lower.tail=TRUE)
data(mtcars)
n<-nrow(mtcars)
#predictor<-mtcars$wt-mean(mtcars$wt)
#prediction<-mtcars$mpg-mean(mtcars$mpg)
#linfit<-lm(prediction~predictor)
linfit<-lm(mpg~wt,data=mtcars)
beta_0<-summary(linfit)$coefficients[1,1]
sebeta_0<-summary(linfit)$coefficients[1,2]
beta_1<-summary(linfit)$coefficients[2,1]
yhati<-beta_0+beta_1*mean(mtcars$wt) # prediction @ mean
# standard error of prediction @ mean
sepredatmean<-summary(linfit)$sigma*sqrt(1+(1/n))
yhati-sepredatmean*qt(0.975,n-2,lower.tail=FALSE)
data(mtcars)
n<-nrow(mtcars)
#predictor<-mtcars$wt-mean(mtcars$wt)
#prediction<-mtcars$mpg-mean(mtcars$mpg)
#linfit<-lm(prediction~predictor)
linfit<-lm(mpg~wt,data=mtcars)
beta_0<-summary(linfit)$coefficients[1,1]
sebeta_0<-summary(linfit)$coefficients[1,2]
beta_1<-summary(linfit)$coefficients[2,1]
wt<-mean(mtcars$wt)
yhati<-predict(linfit,newdata=wt) # prediction @ mean
yhati
beta_0+beta_1*mean(mtcars$wt)
sqrt(1+(1/n))
summary(linfit)$sigma
summary(linfit)$sigma*sqrt(1+(1/n))
yhati-sepredatmean*qt(0.975,n-2)
sepredatmean<-summary(linfit)$sigma*sqrt(1+(1/n))
yhati-sepredatmean*qt(0.975,n-2)
?predict
predict(linfit,newdata=wt,interval="confidence") # prediction @ mean
data(mtcars)
n<-nrow(mtcars)
#predictor<-mtcars$wt-mean(mtcars$wt)
#prediction<-mtcars$mpg-mean(mtcars$mpg)
#linfit<-lm(prediction~predictor)
linfit<-lm(mpg~wt,data=mtcars)
beta_0<-summary(linfit)$coefficients[1,1]
sebeta_0<-summary(linfit)$coefficients[1,2]
beta_1<-summary(linfit)$coefficients[2,1]
wt<-mean(mtcars$wt)
predict(linfit,newdata=wt,interval="confidence")[2] # prediction @ mean
?mtcars
mtcars
data(mtcars)
linfit1<-lm(mpg~wt,data=mtcars)
wt<-3
predict(linfit1,newdata=wt,interval="confidence") # prediction @ new value
data(mtcars)
linfit1<-lm(mpg~wt,data=mtcars)
wt<-3
predict(linfit1,newdata=wt,interval="prediction") # prediction @ new value
data(mtcars)
linfit1<-lm(mpg~wt,data=mtcars)
wt<-2
predict(linfit1,newdata=wt,interval="prediction") # prediction @ new value
data(mtcars)
linfit2<-lm(mpg~wt,data=mtcars)
summary(linfit2)$cooefficients
data(mtcars)
linfit2<-lm(mpg~wt,data=mtcars)
summary(linfit2)$coefficients
coeft1<- summary(linfit2)$coefficients
data(mtcars)
linfit2<-lm(mpg~wt/2,data=mtcars)
coeft2<- summary(linfit2)$coefficients
coeft2
data(mtcars)
linfit2<-lm(mpg~wt/2,data=mtcars)
coeft2<- summary(linfit2)$coefficients
wt<-1
predict(linfit2,newdata=wt,interval="prediction") # prediction @ new value
wt<-2
predict(linfit1,newdata=wt,interval="prediction") # prediction @ new value
data(mtcars)
linfit1<-lm(mpg~wt,data=mtcars)
wt<-3
predict(linfit1,newdata=wt,interval="prediction") # prediction @ new value
data(mtcars)
linfit2<-lm(mpg~wt/2,data=mtcars)
coeft2<- summary(linfit2)$coefficients
wt<-1
predict(linfit1,newdata=wt,interval="confidence") # prediction @ new value
summary(linfit2)$coefficients
data(mtcars)
linfit2<-lm(mpg~wt/2,data=mtcars)
summary(linfit2)$coefficients
linfit2<-lm(mpg~wt/2,mtcars)
?lm
data(mtcars)
linfit2<-lm(mpg~wt/2,data=mtcars)
data(mtcars)
y<-mtcars$mpg
x<-mtcars$wt*0.5
linfit2<-lm(y~x)
summary(linfit2)$coefficients
data(mtcars)
linfit3<-lm(mpg~wt,data=mtcars)
beta_0=summary(linfit2)$coefficients[1,1]
beta_1=summary(linfit2)$coefficients[2,1]
sum((mtcars$mpg-mpg$wt*beta_1)^2)/sum((mtcars$mpg-beta_0)^2)
data(mtcars)
linfit3<-lm(mpg~wt,data=mtcars)
beta_0=summary(linfit2)$coefficients[1,1]
beta_1=summary(linfit2)$coefficients[2,1]
sum((mtcars$mpg-mtcars$wt*beta_1)^2)/sum((mtcars$mpg-beta_0)^2)
data(mtcars)
linfit3<-lm(mpg~wt,data=mtcars)
beta_0=summary(linfit2)$coefficients[1,1]
beta_1=summary(linfit2)$coefficients[2,1]
sum((mtcars$mpg-(mtcars$wt*beta_1+beta_0)^2)/sum((mtcars$mpg-beta_0)^2)
)
predict(linfit3)
data(mtcars)
linfit3<-lm(mpg~wt,data=mtcars)
beta_0=summary(linfit2)$coefficients[1,1]
beta_1=summary(linfit2)$coefficients[2,1]
sum((mtcars$mpg-predict(linfit3)^2)/sum((mtcars$mpg-beta_0)^2)
.
data(mtcars)
linfit3<-lm(mpg~wt,data=mtcars)
beta_0=summary(linfit2)$coefficients[1,1]
beta_1=summary(linfit2)$coefficients[2,1]
sum((mtcars$mpg-predict(linfit3))^2)/sum((mtcars$mpg-beta_0)^2)
mtcars$mpg-predict(linfit3))^2
mtcars$mpg-predict(linfit3)^2
(mtcars$mpg-predict(linfit3))^2
sum((mtcars$mpg-predict(linfit3))^2)
summary(linfit2)$coefficients[1,1]
summary(linfit2)$coefficients[1,1]
summary(linfit2)$coefficients
ssedenominator<-sum((mtcars$mpg-summary(linfit3)$coefficients[1,1])^2)
ssenumerator/ssedenominator
ssenumerator<-sum((mtcars$mpg-predict(linfit3))^2)
ssenumerator/ssedenominator
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
n<-length(x)
fit<-lm(y~x)
summary(fit)$coefficients
coeftable<-summary(fit)$coefficients
data(mtcars
)
names(mtcars)
summary(mtcars)
head(mtcars)
?mtcars
fit1<-lm(mpg~.,data=mtcars)
summary(fit1)$coefficients
?plot
plot(mtcars$am,mtcar$mpg)
plot(mtcars$am,mtcars$mpg)
fit2<-lm(mpg~am,data=mtcars)
summary(fit2)$coefficients
table(mtcars$am)
19+13
unique(mtcars$am)
dim(mtcars)
table(mtcars$
)
?mtcars
autoindex<-which(mtcars$am==0)
mean(mtcars[autoindex,mtcars$mpg])
mean(mtcars[autoindex,9])
mean(mtcars[autoindex,1])
mean(mtcars[-autoindex,1])
?mtcars
```{r plots,echo=FALSE}
data(mtcars)
require(ggplot2)
require(GGally)
fig1<-ggpairs(mtcars,lower=list(continuous="smooth"),params=c(method="loess"))
fig1
#pairs(mtcars,panel=panel.smooth)
install.packages("GGally")
data(mtcars)
require(ggplot2)
require(GGally)
fig1<-ggpairs(mtcars,lower=list(continuous="smooth"),params=c(method="loess"))
fig1
#pairs(mtcars,panel=panel.smooth)
data(mtcars)
pairs(mtcars,panel=panel.smooth)
## Commented code below produces a very readable output but takes a while to render
#require(ggplot2)
#require(GGally)
#fig1<-ggpairs(mtcars,lower=list(continuous="smooth"),params=c(method="loess"))
#fig1
unique(mtcars$vs)
?pairs
data(mtcars)
p<-pairs(mtcars,panel=panel.smooth)
data(mtcars)
fullfit<-lm(mpg~.,data=mtcars)
summary(fullfit)$coefficients
data(mtcars)
amfit<-lm(mpg~am,data=mtcars)
summary(amfit)$coefficients
?mtcars
data(mtcars)
fullfit<-lm(mpg~.,data=mtcars)
fullfit
summary(fullfit)
?step
o<-step(fullfit,direction="backwards")
o<-step(fullfit,direction="backward")
step(fullfit,direction="backward",trace=FALSE)
step(fullfit,direction="backward")
summary(lm(mpg~wt+qsec+am,data=mtcars))
step(fullfit, direction="backward",trace=FALSE)
# Executing  above  without trace=FALSE will show you how R whittles down
# one  parameters at a time to get to the results
names(fullfit)
fullfit$rank
fullfit$effects
data(mtcars)
fullfit<-lm(mpg~.,data=mtcars)
summary(fullfit)$coefficients
summary(fullfit)$adj.r.squared
step(fullfit, direction="backward",trace=FALSE)
step(fullfit, direction="backward",trace=FALSE)
# Executing  above  without trace=FALSE will show you how R whittles down
# the  parameters at a time to get to the final result
finalfit<-lm(mpg~wt+qsec+am,data=mtcars)
summary(final)$coefficients
summary(final)$adj.r.squared
step(fullfit, direction="backward",trace=FALSE)
# Executing  above  without trace=FALSE will show you how R whittles down
# the  parameters at a time to get to the final result
finalfit<-lm(mpg~wt+qsec+am,data=mtcars)
summary(finalfit)$coefficients
summary(finalfit)$adj.r.squared
data(mtcars)
fullfit<-lm(mpg~.,data=mtcars)
summary(fullfit)$coefficients
?influence.measures
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
influence.measures(lm(y~x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
influence.measures(lm(y~x))
```{r modelam,echo=FALSE}
data(mtcars);
amfit<-lm(mpg~am,data=mtcars)
summary(amfit)$coefficients
data(mtcars);
fullfit<-lm(mpg~.,data=mtcars)
summary(fullfit)$coefficients
print(paste0("Adjusted R^2: ",summary(fullfit)$adj.r.squared))
step(fullfit, direction="backward")
library(MASS)
?shuttle
head(shuttle)
library(MASS)
fit1<-glm(use~wind,data=shuttle)
summary(fit1)
unique(shuttle$use)
unique(shuttle$wind)
autoidx<-which(shuttle$use==auto)
autoidx<-which(shuttle$use=="auto")
headidx<-which(shuttle$wind=="head")
library(MASS)
df<-shuttle
df$binauto<-0
df$binwind<-0
autoidx<-which(shuttle$use=="auto")
headidx<-which(shuttle$wind=="head")
df[autoidx,df$binauto]<-1
df[autoidx,df$binwind]<-1
fit1<-glm(binauto~binwind,data=df,family="binomial")
summary(fit1)
swirl
swirl()
library(swirl)
swirl()
q()
install.packages("rJava")
pwd()
setwd("C:/Users/koushikk/repos/XeevaIDM/Confidence")
#######################################
##### O - INITIALIZE SCRIPT PARAMETERS
#######################################
## Load the needed libraries and functions
library(caret)
library(ggplot2)
library(ROCR)
source("ConfidenceUtilities.R")
## Set script parameters
set.seed(12345) # for repeatability of random numbers
datafileName<-"c:\\idm\\TopicSearchwithL1only" # source file
datafileName<-"c:\\idm\\TopicSearchwithL1only.csv" # source file
dataFile<-read.csv(datafileName)
usefulCols<-c(3,8,11,14,15,17)
workingData<-dataFile[,usefulCols]
workingData$Dist.1.and.2<-as.numeric(workingData$Dist.1.and.2)
workingData$Dist.1.and.3<-as.numeric(workingData$Dist.1.and.3)
workingData$Dist.2.and.3<-as.numeric(workingData$Dist.2.and.3)
workingData<-workingData[complete.cases(workingData),]
inTrainCV<-createDataPartition(y=workingData$L2,p=0.8,list=FALSE)
traincv<-workingData[inTrainCV,]
## 75% of 80% is 60%: Split traincv to training and crossvalidation
inTrain<-createDataPartition(y=traincv$L2,p=0.75,list=FALSE)
trainingData<-traincv[inTrain,]
cvData<-traincv[-inTrain,]
testingData<-workingData[-inTrainCV,]
## clean out workspace
rm(traincv,dataFile)
bglm1fit<-train(L2~.,data=trainingData,method="bayesglm")
bglm1val<-predict(bglm1fit,newdata=cvData[,-6])
obj<-fitInZeroOneScale(bglm1val)
outputs<-obj[[1]]
confidenceThreshold<-getBestThreshold(outputs,cvData$L3)
a<-bglm1fit$finalModel
coef(a)
#######################################
##### O - INITIALIZE SCRIPT PARAMETERS
#######################################
## Load the needed libraries and functions
library(caret)
library(ggplot2)
library(ROCR)
source("ConfidenceUtilities.R")
## Set script parameters
set.seed(12345) # for repeatability of random numbers
datafileName<-"c:\\idm\\TopicSearchwithL1only.csv" # source file
dataFile<-read.csv(datafileName)
usefulCols<-c(3,8,11,14,15,17)
workingData<-dataFile[,usefulCols]
## Set the distance columns as numeric,
## they were read in as  factors during file read
workingData$Dist.1.and.2<-as.numeric(workingData$Dist.1.and.2)
workingData$Dist.1.and.3<-as.numeric(workingData$Dist.1.and.3)
workingData$Dist.2.and.3<-as.numeric(workingData$Dist.2.and.3)
## Clean data set for analysis
workingData<-workingData[complete.cases(workingData),]
####################################################################
##### 2 - PERFORM SAMPLING AND CREATE  TRAINING, CV AND TESTING SETS
####################################################################
## Get training and cross validation in one set
inTrainCV<-createDataPartition(y=workingData$L2,p=0.8,list=FALSE)
traincv<-workingData[inTrainCV,]
## 75% of 80% is 60%: Split traincv to training and crossvalidation
inTrain<-createDataPartition(y=traincv$L2,p=0.75,list=FALSE)
trainingData<-traincv[inTrain,]
cvData<-traincv[-inTrain,]
## Get testing data
testingData<-workingData[-inTrainCV,]
## clean out workspace
rm(traincv,dataFile)
## Train on Bayes GLM model using training set data
bglm1fit<-train(L2~.,data=trainingData,method="bayesglm")
## Apply model on cross-validation data set and get ouputs
bglm1val<-predict(bglm1fit,newdata=cvData[,-6])
obj<-fitInZeroOneScale(bglm1val)
outputs<-obj[[1]]
pred<-prediction(outputs,cvData$L2)
## create various performance objects
perff<-performance(pred,"f")
perfspec<-performance(pred,"spec")
perfsens<-performance(pred,"sens")
perfacc<-performance(pred,"acc")
cutoffvalues<-perff@x.values[[1]] ## list of common cutoff values
fdf<-data.frame(cutoff=cutoffvalues,
type=rep('f',length(cutoffvalues)),
value=perff@y.values[[1]])
specdf<-data.frame(cutoff=cutoffvalues,
type=rep('spec',length(cutoffvalues)),
value=perfspec@y.values[[1]])
sensdf<-data.frame(cutoff=cutoffvalues,
type=rep('sens',length(cutoffvalues)),
value=perfsens@y.values[[1]])
accdf<-data.frame(cutoff=cutoffvalues,
type=rep('acc',length(cutoffvalues)),
value=perfacc@y.values[[1]])
scoredf<-rbind(fdf,specdf,accdf,sensdf)
qplot(cutoff,value,data=scoredf,color=type)
a<-bglm1fit$finalModel
coef(a)
